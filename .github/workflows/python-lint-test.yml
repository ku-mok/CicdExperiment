name: python-lint-and-test
on: [pull_request]
env:
  PYTHON_VERSION: 3.9
  WORK_DIR: ./pythonbase
defaults:
  run:
    working-directory: ./pythonbase
jobs:
  python-test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Packages
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        run: poetry install
      - name: Lint
        id: lint
        continue-on-error: true
        run: |
          set -o pipefail
          make lint | tee lint.log
      - name: Test
        id: test
        continue-on-error: true
        run: |
         set -o pipefail
         make test | tee -a test.log
      - name: Typecheck
        id: typecheck
        continue-on-error: true
        run: |
         set -o pipefail
         make typecheck | tee -a typecheck.log
      - name: Comment to pull request if lint or test failed
        uses: actions/github-script@v5
        if: steps.lint.outcome == 'failure' || steps.test.outcome == 'failure' || steps.typecheck.outcome == 'failure'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const workingDir = process.env.WORK_DIR || process.cwd();
            const lintLog = fs.readFileSync(path.join(workingDir, 'lint.log'), 'utf8');
            const testLog = fs.readFileSync(path.join(workingDir, 'test.log'), 'utf8');
            const typecheckLog = fs.readFileSync(path.join(workingDir, 'typecheck.log'), 'utf8');
            const message = `
            ## Lint
            \`\`\`
            ${lintLog}
            \`\`\`
            ## Test
            \`\`\`
            ${testLog}
            \`\`\`
            ## Typecheck
            \`\`\`
            ${typecheckLog}
            \`\`\`
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            });